# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProfileModel {
  id: Float!
}

type PostWithTextModel {
  id: Float
  profileID: Float
  profile: ProfileModel
  type: PostType
  content: String
}

enum PostType {
  Text
  Image
  Video
  Album
  SharedContent
}

type PostWithImageModel {
  id: Float
  profileID: Float
  profile: ProfileModel
  type: PostType
  mediaID: Float
  content: String
}

type PostWithVideoModel {
  id: Float
  profileID: Float
  profile: ProfileModel
  type: PostType
  mediaID: Float
  content: String
}

type PostWithAlbumModel {
  id: Float
  profileID: Float
  profile: ProfileModel
  type: PostType
  mediaIDs: [Float!]
  content: String
}

type PostWithSharedContentModel {
  id: Float
  profileID: Float
  profile: ProfileModel
  type: PostType
  resourceType: PostSharedContentType
  resourceID: Float
  content: String
}

enum PostSharedContentType {
  Post
  Media
}

type PostReactionModel {
  id: Float
  postID: Float
  profileID: Float
  reaction: ReactionType
}

enum ReactionType {
  Like
}

type Query {
  post(filter: PostFilterByOneInput!): PostUnion!
  posts(filter: PostFilterByManyInput): [PostUnion!]!
  postReaction(filter: PostReactionFilterOneInput!): PostReactionModel!
  postReactions(filter: PostReactionFilterManyInput!): [PostReactionModel!]!
}

union PostUnion = PostWithTextModel | PostWithImageModel | PostWithVideoModel | PostWithAlbumModel | PostWithSharedContentModel

input PostFilterByOneInput {
  id: Float!
}

input PostFilterByManyInput {
  ids: [Float!]
  profileIDs: [Float!]
}

input PostReactionFilterOneInput {
  postID: Float
  profileID: Float
}

input PostReactionFilterManyInput {
  postIDs: [Float!]
  profileIDs: [Float!]
}

type Mutation {
  postWithTextCreate(input: PostWithTextCreateInput!): PostWithTextModel!
  postWithImageCreate(input: PostWithImageCreateInput!): PostWithImageModel!
  postWithVideoCreate(input: PostWithVideoCreateInput!): PostWithVideoModel!
  postWithAlbumCreate(input: PostWithAlbumInput!): PostWithAlbumModel!
  postWithSharedContentCreate(input: PostWithSharedContentInput!): PostWithSharedContentModel!
  postDelete(filter: PostFilterByOneInput!): Boolean!
  postReactionCreate(input: PostReactionCreateInput!): PostReactionModel!
  postReactionDelete(filter: PostReactionFilterOneInput!): Boolean!
}

input PostWithTextCreateInput {
  content: String!
}

input PostWithImageCreateInput {
  mediaID: Float!
  content: String!
}

input PostWithVideoCreateInput {
  mediaID: Float!
  content: String!
}

input PostWithAlbumInput {
  mediaIDs: [Float!]!
  content: String!
}

input PostWithSharedContentInput {
  resourceType: PostSharedContentType!
  resourceID: Float!
  content: String!
}

input PostReactionCreateInput {
  postID: Float!
  reaction: ReactionType!
}